import path from "node:path";
import fs from "node:fs";
import { sliceImageBySize } from "./sliceImageBySize";

const boardsDir = path.join(process.cwd(), "public", "boards");
const difficulties = ["easy", "medium", "hard"] as const;

async function generatePieces() {
  const piecesDir = path.join(process.cwd(), "public", "pieces");
  if (fs.existsSync(piecesDir)) {
    // –ï—Å–ª–∏ –ø–∞–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    return;
  }
  console.log("üß© –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –ø–∞–∑–ª–æ–≤...");
  const files = fs.readdirSync(boardsDir).filter(f => /\.(jpe?g|png|webp)$/i.test(f));
  if (files.length === 0) {
    console.log("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ public/boards");
    return;
  }
  const tasks = files.flatMap(file =>
    difficulties.map(difficulty => {
      const imagePath = path.join(boardsDir, file);
      return sliceImageBySize(imagePath, difficulty);
    })
  );
  await Promise.allSettled(tasks);
  console.log("‚úÖ –§—Ä–∞–≥–º–µ–Ω—Ç—ã –ø–∞–∑–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
}

generatePieces();
